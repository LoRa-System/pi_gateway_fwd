!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APPEND_INDENT	src/parson.c	720;"	d	file:
APPEND_INDENT	src/parson.c	881;"	d	file:
APPEND_STRING	src/parson.c	715;"	d	file:
APPEND_STRING	src/parson.c	880;"	d	file:
APP_NAME	Makefile	/^APP_NAME := lora_pkt_fwd$/;"	m
AR	Makefile	/^AR := $(CROSS_COMPILE)ar$/;"	m
ARCH	Makefile	/^ARCH ?=$/;"	m
ARRAY_MAX_CAPACITY	src/parson.c	36;"	d	file:
ARRAY_SIZE	src/base64.c	29;"	d	file:
ARRAY_SIZE	src/lora_pkt_fwd.c	66;"	d	file:
BEACON_GUARD	src/jitqueue.c	42;"	d	file:
BEACON_POLL_MS	src/lora_pkt_fwd.c	86;"	d	file:
BEACON_RESERVED	src/jitqueue.c	44;"	d	file:
CC	Makefile	/^CC := $(CROSS_COMPILE)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I.$/;"	m
CRIT	src/base64.c	30;"	d	file:
CROSS_COMPILE	Makefile	/^CROSS_COMPILE ?=$/;"	m
DEBUG	src/base64.c	33;"	d	file:
DEBUG_BEACON	inc/trace.h	24;"	d
DEBUG_ERROR	inc/trace.h	29;"	d
DEBUG_INFO	inc/trace.h	26;"	d
DEBUG_JIT	inc/trace.h	21;"	d
DEBUG_JIT_ERROR	inc/trace.h	22;"	d
DEBUG_LOG	inc/trace.h	25;"	d
DEBUG_PKT_FWD	inc/trace.h	20;"	d
DEBUG_PPM	inc/trace.h	27;"	d
DEBUG_TIMERSYNC	inc/trace.h	23;"	d
DEBUG_WARNING	inc/trace.h	28;"	d
DEFAULT_BEACON_BW_HZ	src/lora_pkt_fwd.c	117;"	d	file:
DEFAULT_BEACON_DATARATE	src/lora_pkt_fwd.c	116;"	d	file:
DEFAULT_BEACON_FREQ_HZ	src/lora_pkt_fwd.c	113;"	d	file:
DEFAULT_BEACON_FREQ_NB	src/lora_pkt_fwd.c	114;"	d	file:
DEFAULT_BEACON_FREQ_STEP	src/lora_pkt_fwd.c	115;"	d	file:
DEFAULT_BEACON_INFODESC	src/lora_pkt_fwd.c	119;"	d	file:
DEFAULT_BEACON_POWER	src/lora_pkt_fwd.c	118;"	d	file:
DEFAULT_KEEPALIVE	src/lora_pkt_fwd.c	80;"	d	file:
DEFAULT_PORT_DW	src/lora_pkt_fwd.c	79;"	d	file:
DEFAULT_PORT_UP	src/lora_pkt_fwd.c	78;"	d	file:
DEFAULT_SERVER	src/lora_pkt_fwd.c	77;"	d	file:
DEFAULT_STAT	src/lora_pkt_fwd.c	81;"	d	file:
DOUBLE_SERIALIZATION_FORMAT	src/parson.c	39;"	d	file:
FETCH_SLEEP_MS	src/lora_pkt_fwd.c	85;"	d	file:
GPIO_IN	inc/radio.h	186;"	d
GPIO_OUT	inc/radio.h	185;"	d
GPS_REF_MAX_AGE	src/lora_pkt_fwd.c	84;"	d	file:
HIGH	inc/radio.h	183;"	d
INCLUDES	Makefile	/^INCLUDES = $(wildcard inc\/*.h)$/;"	m
INVERTIQ2_OFF	inc/radio.h	143;"	d
INVERTIQ2_ON	inc/radio.h	142;"	d
INVERTIQ_RX_MASK	inc/radio.h	135;"	d
INVERTIQ_RX_OFF	inc/radio.h	136;"	d
INVERTIQ_RX_ON	inc/radio.h	137;"	d
INVERTIQ_TX_MASK	inc/radio.h	138;"	d
INVERTIQ_TX_OFF	inc/radio.h	139;"	d
INVERTIQ_TX_ON	inc/radio.h	140;"	d
IRQ_LORA_CDDETD_MASK	inc/radio.h	100;"	d
IRQ_LORA_CDDONE_MASK	inc/radio.h	98;"	d
IRQ_LORA_CRCERR_MASK	inc/radio.h	95;"	d
IRQ_LORA_FHSSCH_MASK	inc/radio.h	99;"	d
IRQ_LORA_HEADER_MASK	inc/radio.h	96;"	d
IRQ_LORA_RXDONE_MASK	inc/radio.h	94;"	d
IRQ_LORA_RXTOUT_MASK	inc/radio.h	93;"	d
IRQ_LORA_TXDONE_MASK	inc/radio.h	97;"	d
IS_CONT	src/parson.c	52;"	d	file:
JIT_ERROR_COLLISION_BEACON	inc/jitqueue.h	/^    JIT_ERROR_COLLISION_BEACON, \/* A beacon is planned for this timeframe *\/$/;"	e	enum:jit_error_e
JIT_ERROR_COLLISION_PACKET	inc/jitqueue.h	/^    JIT_ERROR_COLLISION_PACKET, \/* A packet is already enqueued for this timeframe *\/$/;"	e	enum:jit_error_e
JIT_ERROR_EMPTY	inc/jitqueue.h	/^    JIT_ERROR_EMPTY,        \/* Downlink queue is empty *\/$/;"	e	enum:jit_error_e
JIT_ERROR_FULL	inc/jitqueue.h	/^    JIT_ERROR_FULL,         \/* Downlink queue is full *\/$/;"	e	enum:jit_error_e
JIT_ERROR_GPS_UNLOCKED	inc/jitqueue.h	/^    JIT_ERROR_GPS_UNLOCKED, \/* GPS timestamp could not be used as GPS is unlocked *\/$/;"	e	enum:jit_error_e
JIT_ERROR_INVALID	inc/jitqueue.h	/^    JIT_ERROR_INVALID       \/* Packet is invalid *\/$/;"	e	enum:jit_error_e
JIT_ERROR_OK	inc/jitqueue.h	/^    JIT_ERROR_OK,           \/* Packet ok to be sent *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TOO_EARLY	inc/jitqueue.h	/^    JIT_ERROR_TOO_EARLY,    \/* Too early to queue this packet *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TOO_LATE	inc/jitqueue.h	/^    JIT_ERROR_TOO_LATE,     \/* Too late to send this packet *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TX_FREQ	inc/jitqueue.h	/^    JIT_ERROR_TX_FREQ,      \/* The required frequency for downlink is not supported *\/$/;"	e	enum:jit_error_e
JIT_ERROR_TX_POWER	inc/jitqueue.h	/^    JIT_ERROR_TX_POWER,     \/* The required power for downlink is not supported *\/$/;"	e	enum:jit_error_e
JIT_NUM_BEACON_IN_QUEUE	inc/jitqueue.h	34;"	d
JIT_PKT_TYPE_BEACON	inc/jitqueue.h	/^    JIT_PKT_TYPE_BEACON$/;"	e	enum:jit_pkt_type_e
JIT_PKT_TYPE_DOWNLINK_CLASS_A	inc/jitqueue.h	/^    JIT_PKT_TYPE_DOWNLINK_CLASS_A,$/;"	e	enum:jit_pkt_type_e
JIT_PKT_TYPE_DOWNLINK_CLASS_B	inc/jitqueue.h	/^    JIT_PKT_TYPE_DOWNLINK_CLASS_B,$/;"	e	enum:jit_pkt_type_e
JIT_PKT_TYPE_DOWNLINK_CLASS_C	inc/jitqueue.h	/^    JIT_PKT_TYPE_DOWNLINK_CLASS_C,$/;"	e	enum:jit_pkt_type_e
JIT_QUEUE_MAX	inc/jitqueue.h	33;"	d
JSONArray	inc/parson.h	/^    JSONArray   = 5,$/;"	e	enum:json_value_type
JSONBoolean	inc/parson.h	/^    JSONBoolean = 6$/;"	e	enum:json_value_type
JSONError	inc/parson.h	/^    JSONError   = -1,$/;"	e	enum:json_value_type
JSONFailure	inc/parson.h	/^    JSONFailure = -1$/;"	e	enum:json_result_t
JSONNull	inc/parson.h	/^    JSONNull    = 1,$/;"	e	enum:json_value_type
JSONNumber	inc/parson.h	/^    JSONNumber  = 3,$/;"	e	enum:json_value_type
JSONObject	inc/parson.h	/^    JSONObject  = 4,$/;"	e	enum:json_value_type
JSONString	inc/parson.h	/^    JSONString  = 2,$/;"	e	enum:json_value_type
JSONSuccess	inc/parson.h	/^    JSONSuccess = 0,$/;"	e	enum:json_result_t
JSON_Array	inc/parson.h	/^typedef struct json_array_t  JSON_Array;$/;"	t	typeref:struct:json_array_t
JSON_Free_Function	inc/parson.h	/^typedef void   (*JSON_Free_Function)(void *);$/;"	t
JSON_Malloc_Function	inc/parson.h	/^typedef void * (*JSON_Malloc_Function)(size_t);$/;"	t
JSON_Object	inc/parson.h	/^typedef struct json_object_t JSON_Object;$/;"	t	typeref:struct:json_object_t
JSON_Status	inc/parson.h	/^typedef int JSON_Status;$/;"	t
JSON_Value	inc/parson.h	/^typedef struct json_value_t  JSON_Value;$/;"	t	typeref:struct:json_value_t
JSON_Value_Type	inc/parson.h	/^typedef int JSON_Value_Type;$/;"	t
JSON_Value_Value	src/parson.c	/^} JSON_Value_Value;$/;"	t	typeref:union:json_value_value	file:
LGW_INC	Makefile	/^LGW_INC =$/;"	m
LGW_PATH	Makefile	/^LGW_PATH ?= ..\/libloragw$/;"	m
LIBS	Makefile	/^LIBS := -lloragw -luci -lrt -lpthread -lm$/;"	m
LNA_LOW_GAIN	inc/radio.h	76;"	d
LNA_MAX_GAIN	inc/radio.h	74;"	d
LNA_OFF_GAIN	inc/radio.h	75;"	d
LORA_MAC_PREAMBLE	inc/radio.h	69;"	d
LOW	inc/radio.h	182;"	d
MAP_DIO0_LORA_RXDONE	inc/radio.h	104;"	d
MAP_DIO0_LORA_TXDONE	inc/radio.h	105;"	d
MAP_DIO1_LORA_NOP	inc/radio.h	107;"	d
MAP_DIO1_LORA_RXTOUT	inc/radio.h	106;"	d
MAP_DIO2_LORA_NOP	inc/radio.h	108;"	d
MAX	src/parson.c	44;"	d	file:
MAXLINE	inc/radio.h	145;"	d
MAX_NESTING	src/parson.c	38;"	d	file:
MIN_FSK_PREAMB	src/lora_pkt_fwd.c	104;"	d	file:
MIN_LORA_PREAMB	src/lora_pkt_fwd.c	102;"	d	file:
MSG	inc/trace.h	31;"	d
MSG_DEBUG	inc/trace.h	32;"	d
MSG_INFO	inc/trace.h	38;"	d
NB_PKT_MAX	src/lora_pkt_fwd.c	100;"	d	file:
OBJDIR	Makefile	/^OBJDIR = obj$/;"	m
OBJECT_MAX_CAPACITY	src/parson.c	37;"	d	file:
OPMODE_CAD	inc/radio.h	89;"	d
OPMODE_FSRX	inc/radio.h	86;"	d
OPMODE_FSTX	inc/radio.h	84;"	d
OPMODE_LORA	inc/radio.h	80;"	d
OPMODE_MASK	inc/radio.h	81;"	d
OPMODE_RX	inc/radio.h	87;"	d
OPMODE_RX_SINGLE	inc/radio.h	88;"	d
OPMODE_SLEEP	inc/radio.h	82;"	d
OPMODE_STANDBY	inc/radio.h	83;"	d
OPMODE_TX	inc/radio.h	85;"	d
PAYLOAD_LENGTH	inc/radio.h	66;"	d
PKT_PULL_ACK	src/lora_pkt_fwd.c	97;"	d	file:
PKT_PULL_DATA	src/lora_pkt_fwd.c	95;"	d	file:
PKT_PULL_RESP	src/lora_pkt_fwd.c	96;"	d	file:
PKT_PUSH_ACK	src/lora_pkt_fwd.c	94;"	d	file:
PKT_PUSH_DATA	src/lora_pkt_fwd.c	93;"	d	file:
PKT_TX_ACK	src/lora_pkt_fwd.c	98;"	d	file:
PROTOCOL_VERSION	src/lora_pkt_fwd.c	88;"	d	file:
PULL_TIMEOUT_MS	src/lora_pkt_fwd.c	83;"	d	file:
PUSH_TIMEOUT_MS	src/lora_pkt_fwd.c	82;"	d	file:
READ_ACCESS	inc/radio.h	188;"	d
REG_DETECTION_OPTIMIZE	inc/radio.h	60;"	d
REG_DETECTION_THRESHOLD	inc/radio.h	61;"	d
REG_DIO_MAPPING_1	inc/radio.h	43;"	d
REG_DIO_MAPPING_2	inc/radio.h	44;"	d
REG_FIFO	inc/radio.h	35;"	d
REG_FIFO_ADDR_PTR	inc/radio.h	37;"	d
REG_FIFO_RX_BASE_AD	inc/radio.h	39;"	d
REG_FIFO_RX_CURRENT_ADDR	inc/radio.h	41;"	d
REG_FIFO_TX_BASE_AD	inc/radio.h	38;"	d
REG_FRF_LSB	inc/radio.h	120;"	d
REG_FRF_MID	inc/radio.h	119;"	d
REG_FRF_MSB	inc/radio.h	118;"	d
REG_HOP_PERIOD	inc/radio.h	53;"	d
REG_INVERTIQ	inc/radio.h	125;"	d
REG_INVERTIQ2	inc/radio.h	126;"	d
REG_IRQ_FLAGS	inc/radio.h	42;"	d
REG_IRQ_FLAGS_MASK	inc/radio.h	51;"	d
REG_LNA	inc/radio.h	73;"	d
REG_MAX_PAYLOAD_LENGTH	inc/radio.h	52;"	d
REG_MODEM_CONFIG	inc/radio.h	45;"	d
REG_MODEM_CONFIG2	inc/radio.h	46;"	d
REG_MODEM_CONFIG3	inc/radio.h	47;"	d
REG_OPMODE	inc/radio.h	36;"	d
REG_PACONFIG	inc/radio.h	122;"	d
REG_PADAC	inc/radio.h	56;"	d
REG_PARAMP	inc/radio.h	123;"	d
REG_PAYLOAD_LENGTH	inc/radio.h	50;"	d
REG_PKTRSSI	inc/radio.h	57;"	d
REG_PKT_SNR_VALUE	inc/radio.h	49;"	d
REG_PREAMBLE_LSB	inc/radio.h	64;"	d
REG_PREAMBLE_MSB	inc/radio.h	63;"	d
REG_RSSI	inc/radio.h	58;"	d
REG_RX_NB_BYTES	inc/radio.h	40;"	d
REG_SYMB_TIMEOUT_LSB	inc/radio.h	48;"	d
REG_SYNC_WORD	inc/radio.h	54;"	d
REG_VERSION	inc/radio.h	55;"	d
RELEASE_VERSION	Makefile	/^RELEASE_VERSION := `cat ..\/VERSION`$/;"	m
RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1	inc/radio.h	129;"	d
RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2	inc/radio.h	130;"	d
RXMODE_RSSI	inc/radio.h	/^enum { RXMODE_SINGLE, RXMODE_SCAN, RXMODE_RSSI };$/;"	e	enum:__anon1
RXMODE_SCAN	inc/radio.h	/^enum { RXMODE_SINGLE, RXMODE_SCAN, RXMODE_RSSI };$/;"	e	enum:__anon1
RXMODE_SINGLE	inc/radio.h	/^enum { RXMODE_SINGLE, RXMODE_SCAN, RXMODE_RSSI };$/;"	e	enum:__anon1
SF10	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	e	enum:sf_t
SF11	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	e	enum:sf_t
SF12	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	e	enum:sf_t
SF7	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	e	enum:sf_t
SF8	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	e	enum:sf_t
SF9	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	e	enum:sf_t
SIZEOF_TOKEN	src/parson.c	41;"	d	file:
SKIP_CHAR	src/parson.c	42;"	d	file:
SKIP_WHITESPACES	src/parson.c	43;"	d	file:
SPI_DEV_RADIO	inc/radio.h	191;"	d
SPI_SPEED	inc/radio.h	190;"	d
STARTING_CAPACITY	src/parson.c	35;"	d	file:
STATUS_SIZE	src/lora_pkt_fwd.c	107;"	d	file:
STD_FSK_PREAMB	src/lora_pkt_fwd.c	105;"	d	file:
STD_LORA_PREAMB	src/lora_pkt_fwd.c	103;"	d	file:
STR	src/lora_pkt_fwd.c	68;"	d	file:
STRINGIFY	src/lora_pkt_fwd.c	67;"	d	file:
SX1276_MC2_RX_PAYLOAD_CRCON	inc/radio.h	111;"	d
SX1276_MC3_AGCAUTO	inc/radio.h	115;"	d
SX1276_MC3_LOW_DATA_RATE_OPTIMIZE	inc/radio.h	114;"	d
TX_BUFF_SIZE	src/lora_pkt_fwd.c	108;"	d	file:
TX_JIT_DELAY	src/jitqueue.c	39;"	d	file:
TX_MARGIN_DELAY	src/jitqueue.c	37;"	d	file:
TX_MAX_ADVANCE_DELAY	src/jitqueue.c	40;"	d	file:
TX_START_DELAY	src/jitqueue.c	35;"	d	file:
UNIX_GPS_EPOCH_OFFSET	src/lora_pkt_fwd.c	110;"	d	file:
VERSION_STRING	src/lora_pkt_fwd.c	74;"	d	file:
VFLAG	Makefile	/^VFLAG := -D VERSION_STRING="\\"$(RELEASE_VERSION)\\""$/;"	m
WRITE_ACCESS	inc/radio.h	189;"	d
XERR_FILT_COEF	src/lora_pkt_fwd.c	91;"	d	file:
XERR_INIT_AVG	src/lora_pkt_fwd.c	90;"	d	file:
_BASE64_H	inc/base64.h	18;"	d
_CRT_SECURE_NO_WARNINGS	src/parson.c	24;"	d	file:
_GNU_SOURCE	src/jitqueue.c	19;"	d	file:
_LORA_PKTFWD_JIT_H	inc/jitqueue.h	18;"	d
_LORA_PKTFWD_TIMERSYNC_H	inc/timersync.h	18;"	d
_LORA_PKTFWD_TRACE_H	inc/trace.h	18;"	d
_RADIO_H	inc/radio.h	13;"	d
_XOPEN_SOURCE	src/lora_pkt_fwd.c	24;"	d	file:
_XOPEN_SOURCE	src/lora_pkt_fwd.c	26;"	d	file:
__compar_d_fn_t	src/jitqueue.c	/^typedef int (*__compar_d_fn_t) (const void *, const void *, void *);$/;"	t	file:
antenna_gain	src/lora_pkt_fwd.c	/^static int8_t antenna_gain = 0;$/;"	v	file:
append_indent	src/parson.c	/^static int append_indent(char *buf, int level) {$/;"	f	file:
append_string	src/parson.c	/^static int append_string(char *buf, const char *string) {$/;"	f	file:
array	src/parson.c	/^    JSON_Array  *array;$/;"	m	union:json_value_value	file:
autoquit_threshold	src/lora_pkt_fwd.c	/^static uint32_t autoquit_threshold = 0; \/* enable auto-quit after a number of non-acknowledged PULL_DATA (0 = disabled)*\/$/;"	v	file:
b64_to_bin	src/base64.c	/^int b64_to_bin(const char * in, int size, uint8_t * out, int max_len) {$/;"	f
b64_to_bin_nopad	src/base64.c	/^int b64_to_bin_nopad(const char * in, int size, uint8_t * out, int max_len) {$/;"	f
beacon_bw_hz	src/lora_pkt_fwd.c	/^static uint32_t beacon_bw_hz = DEFAULT_BEACON_BW_HZ; \/* set beacon bandwidth, in Hz *\/$/;"	v	file:
beacon_datarate	src/lora_pkt_fwd.c	/^static uint8_t beacon_datarate = DEFAULT_BEACON_DATARATE; \/* set beacon datarate (SF) *\/$/;"	v	file:
beacon_freq_hz	src/lora_pkt_fwd.c	/^static uint32_t beacon_freq_hz = DEFAULT_BEACON_FREQ_HZ; \/* set beacon TX frequency, in Hz *\/$/;"	v	file:
beacon_freq_nb	src/lora_pkt_fwd.c	/^static uint8_t beacon_freq_nb = DEFAULT_BEACON_FREQ_NB; \/* set number of beaconing channels beacon *\/$/;"	v	file:
beacon_freq_step	src/lora_pkt_fwd.c	/^static uint32_t beacon_freq_step = DEFAULT_BEACON_FREQ_STEP; \/* set frequency step between beacon channels, in Hz *\/$/;"	v	file:
beacon_infodesc	src/lora_pkt_fwd.c	/^static uint8_t beacon_infodesc = DEFAULT_BEACON_INFODESC; \/* set beacon information descriptor *\/$/;"	v	file:
beacon_period	src/lora_pkt_fwd.c	/^static uint32_t beacon_period = 0; \/* set beaconing period, must be a sub-multiple of 86400, the nb of sec in a day *\/$/;"	v	file:
beacon_power	src/lora_pkt_fwd.c	/^static int8_t beacon_power = DEFAULT_BEACON_POWER; \/* set beacon TX power, in dBm *\/$/;"	v	file:
bin_to_b64	src/base64.c	/^int bin_to_b64(const uint8_t * in, int size, char * out, int max_len) {$/;"	f
bin_to_b64_nopad	src/base64.c	/^int bin_to_b64_nopad(const uint8_t * in, int size, char * out, int max_len) {$/;"	f
boolean	src/parson.c	/^    int          boolean;$/;"	m	union:json_value_value	file:
bw	inc/radio.h	/^    uint32_t bw;$/;"	m	struct:__anon2
bw	src/single_tx.c	/^static char bw[8] = "125000";$/;"	v	file:
capacity	src/parson.c	/^    size_t       capacity;$/;"	m	struct:json_array_t	file:
capacity	src/parson.c	/^    size_t       capacity;$/;"	m	struct:json_object_t	file:
char_to_code	src/base64.c	/^uint8_t char_to_code(char x) {$/;"	f
code_62	src/base64.c	/^static char code_62 = '+';    \/* RFC 1421 standard character for code 62 *\/$/;"	v	file:
code_63	src/base64.c	/^static char code_63 = '\/';    \/* RFC 1421 standard character for code 63 *\/$/;"	v	file:
code_pad	src/base64.c	/^static char code_pad = '=';    \/* RFC 1421 padding character if padding *\/$/;"	v	file:
code_to_char	src/base64.c	/^char code_to_char(uint8_t x) {$/;"	f
compare	src/jitqueue.c	/^int compare(const void *a, const void *b, void *arg)$/;"	f
count	src/parson.c	/^    size_t       count;$/;"	m	struct:json_array_t	file:
count	src/parson.c	/^    size_t       count;$/;"	m	struct:json_object_t	file:
cr	inc/radio.h	/^    uint8_t cr;$/;"	m	struct:__anon2
cr	src/single_tx.c	/^static char cr[8] = "1";$/;"	v	file:
crc16	src/lora_pkt_fwd.c	/^static uint16_t crc16(const uint8_t * data, unsigned size) {$/;"	f	file:
crccheck	src/radio.c	/^void crccheck(uint8_t spidev, uint8_t nocrc)$/;"	f
ctx	src/lora_pkt_fwd.c	/^static struct uci_context * ctx = NULL; $/;"	v	typeref:struct:uci_context	file:
desc	inc/radio.h	/^    char desc[8];$/;"	m	struct:__anon2
difftimespec	src/lora_pkt_fwd.c	/^static double difftimespec(struct timespec end, struct timespec beginning) {$/;"	f	file:
digitalRead	src/radio.c	/^int digitalRead(int gpio) {$/;"	f
digitalWrite	src/radio.c	/^void digitalWrite(int gpio, int state)$/;"	f
dio	inc/radio.h	/^    uint8_t dio[3];$/;"	m	struct:__anon2
exit_sig	src/lora_pkt_fwd.c	/^volatile bool exit_sig = false; \/* 1 -> application terminates cleanly (shut down hardware, close open files, etc) *\/$/;"	v
exit_sig	src/single_tx.c	/^volatile bool exit_sig = false; \/* 1 -> application terminates cleanly (shut down hardware, close open files, etc) *\/$/;"	v
fp	src/lora_pkt_fwd.c	/^static FILE *fp = NULL;$/;"	v	file:
free	src/parson.c	47;"	d	file:
freq	inc/radio.h	/^    uint32_t freq;$/;"	m	struct:__anon2
freq	src/single_tx.c	/^static char freq[16] = "868500000";            \/* frequency of radio *\/$/;"	v	file:
fwd_error_pkt	src/lora_pkt_fwd.c	/^static bool fwd_error_pkt = false; \/* packets with PAYLOAD CRC ERROR are NOT forwarded *\/$/;"	v	file:
fwd_nocrc_pkt	src/lora_pkt_fwd.c	/^static bool fwd_nocrc_pkt = false; \/* packets with NO PAYLOAD CRC are NOT forwarded *\/$/;"	v	file:
fwd_valid_pkt	src/lora_pkt_fwd.c	/^static bool fwd_valid_pkt = true; \/* packets with PAYLOAD CRC OK are forwarded *\/$/;"	v	file:
get_concentrator_time	src/timersync.c	/^int get_concentrator_time(struct timeval *concent_time, struct timeval unix_time) {$/;"	f
get_config	src/lora_pkt_fwd.c	/^static bool get_config(const char *section, char *option, int len) {$/;"	f	file:
get_quoted_string	src/parson.c	/^static char * get_quoted_string(const char **string) {$/;"	f	file:
get_radio_version	src/radio.c	/^bool get_radio_version(radiodev *dev)$/;"	f
gpio_get_state	src/radio.c	/^static int gpio_get_state(int gpio) {$/;"	f	file:
gpio_release	src/radio.c	/^static bool gpio_release(int gpio) {$/;"	f	file:
gpio_reserve	src/radio.c	/^static bool gpio_reserve(int gpio) {$/;"	f	file:
gpio_set_direction	src/radio.c	/^static bool gpio_set_direction(int gpio, int direction) {$/;"	f	file:
gpio_set_state	src/radio.c	/^static bool gpio_set_state(int gpio, int state) {$/;"	f	file:
gps_coord_valid	src/lora_pkt_fwd.c	/^static bool gps_coord_valid; \/* could we get valid GPS coordinates ? *\/$/;"	v	file:
gps_enabled	src/lora_pkt_fwd.c	/^static bool gps_enabled = false; \/* is GPS enabled on that gateway ? *\/$/;"	v	file:
gps_fake_enable	src/lora_pkt_fwd.c	/^static bool gps_fake_enable; \/* enable the feature *\/$/;"	v	file:
gps_process_coords	src/lora_pkt_fwd.c	/^static void gps_process_coords(void) {$/;"	f	file:
gps_process_sync	src/lora_pkt_fwd.c	/^static void gps_process_sync(void) {$/;"	f	file:
gps_ref_valid	src/lora_pkt_fwd.c	/^static bool gps_ref_valid; \/* is GPS reference acceptable (ie. not too old) *\/$/;"	v	file:
gps_tty_fd	src/lora_pkt_fwd.c	/^static int gps_tty_fd = -1; \/* file descriptor of the GPS TTY port *\/$/;"	v	file:
gps_tty_path	src/lora_pkt_fwd.c	/^static char gps_tty_path[64] = "\\0"; \/* path of the TTY port GPS is connected on *\/$/;"	v	file:
init_socket	src/lora_pkt_fwd.c	/^static int init_socket(const char *servaddr, const char *servport, const char *rectimeout, int len) {$/;"	f	file:
invertio	inc/radio.h	/^    uint8_t invertio;$/;"	m	struct:__anon2
invertiq	src/single_tx.c	/^static int invertiq = 0;$/;"	v	file:
is_decimal	src/parson.c	/^static int is_decimal(const char *string, size_t length) {$/;"	f	file:
is_utf16_hex	src/parson.c	/^static int is_utf16_hex(const unsigned char *s) {$/;"	f	file:
is_valid_utf8	src/parson.c	/^static int is_valid_utf8(const char *string, size_t string_len) {$/;"	f	file:
items	src/parson.c	/^    JSON_Value **items;$/;"	m	struct:json_array_t	file:
jit_collision_test	src/jitqueue.c	/^bool jit_collision_test(uint32_t p1_count_us, uint32_t p1_pre_delay, uint32_t p1_post_delay, uint32_t p2_count_us, uint32_t p2_pre_delay, uint32_t p2_post_delay) {$/;"	f
jit_dequeue	src/jitqueue.c	/^enum jit_error_e jit_dequeue(struct jit_queue_s *queue, int index, struct lgw_pkt_tx_s *packet, enum jit_pkt_type_e *pkt_type) {$/;"	f
jit_enqueue	src/jitqueue.c	/^enum jit_error_e jit_enqueue(struct jit_queue_s *queue, struct timeval *time, struct lgw_pkt_tx_s *packet, enum jit_pkt_type_e pkt_type) {$/;"	f
jit_error_e	inc/jitqueue.h	/^enum jit_error_e {$/;"	g
jit_node_s	inc/jitqueue.h	/^struct jit_node_s {$/;"	s
jit_peek	src/jitqueue.c	/^enum jit_error_e jit_peek(struct jit_queue_s *queue, struct timeval *time, int *pkt_idx) {$/;"	f
jit_pkt_type_e	inc/jitqueue.h	/^enum jit_pkt_type_e {$/;"	g
jit_print_queue	src/jitqueue.c	/^void jit_print_queue(struct jit_queue_s *queue, bool show_all, int debug_level) {$/;"	f
jit_queue	src/lora_pkt_fwd.c	/^static struct jit_queue_s jit_queue;$/;"	v	typeref:struct:jit_queue_s	file:
jit_queue_init	src/jitqueue.c	/^void jit_queue_init(struct jit_queue_s *queue) {$/;"	f
jit_queue_is_empty	src/jitqueue.c	/^bool jit_queue_is_empty(struct jit_queue_s *queue) {$/;"	f
jit_queue_is_full	src/jitqueue.c	/^bool jit_queue_is_full(struct jit_queue_s *queue) {$/;"	f
jit_queue_s	inc/jitqueue.h	/^struct jit_queue_s {$/;"	s
jit_sort_queue	src/jitqueue.c	/^void jit_sort_queue(struct jit_queue_s *queue) {$/;"	f
json_array	src/parson.c	/^JSON_Array * json_array  (const JSON_Value *value) {$/;"	f
json_array_add	src/parson.c	/^static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {$/;"	f	file:
json_array_append_boolean	src/parson.c	/^JSON_Status json_array_append_boolean(JSON_Array *array, int boolean) {$/;"	f
json_array_append_null	src/parson.c	/^JSON_Status json_array_append_null(JSON_Array *array) {$/;"	f
json_array_append_number	src/parson.c	/^JSON_Status json_array_append_number(JSON_Array *array, double number) {$/;"	f
json_array_append_string	src/parson.c	/^JSON_Status json_array_append_string(JSON_Array *array, const char *string) {$/;"	f
json_array_append_value	src/parson.c	/^JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {$/;"	f
json_array_clear	src/parson.c	/^JSON_Status json_array_clear(JSON_Array *array) {$/;"	f
json_array_free	src/parson.c	/^static void json_array_free(JSON_Array *array) {$/;"	f	file:
json_array_get_array	src/parson.c	/^JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_boolean	src/parson.c	/^int json_array_get_boolean(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_count	src/parson.c	/^size_t json_array_get_count(const JSON_Array *array) {$/;"	f
json_array_get_number	src/parson.c	/^double json_array_get_number(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_object	src/parson.c	/^JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_string	src/parson.c	/^const char * json_array_get_string(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_value	src/parson.c	/^JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {$/;"	f
json_array_init	src/parson.c	/^static JSON_Array * json_array_init(void) {$/;"	f	file:
json_array_remove	src/parson.c	/^JSON_Status json_array_remove(JSON_Array *array, size_t ix) {$/;"	f
json_array_replace_boolean	src/parson.c	/^JSON_Status json_array_replace_boolean(JSON_Array *array, size_t i, int boolean) {$/;"	f
json_array_replace_null	src/parson.c	/^JSON_Status json_array_replace_null(JSON_Array *array, size_t i) {$/;"	f
json_array_replace_number	src/parson.c	/^JSON_Status json_array_replace_number(JSON_Array *array, size_t i, double number) {$/;"	f
json_array_replace_string	src/parson.c	/^JSON_Status json_array_replace_string(JSON_Array *array, size_t i, const char* string) {$/;"	f
json_array_replace_value	src/parson.c	/^JSON_Status json_array_replace_value(JSON_Array *array, size_t ix, JSON_Value *value) {$/;"	f
json_array_resize	src/parson.c	/^static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {$/;"	f	file:
json_array_t	src/parson.c	/^struct json_array_t {$/;"	s	file:
json_boolean	src/parson.c	/^int json_boolean(const JSON_Value *value) {$/;"	f
json_free_serialized_string	src/parson.c	/^void json_free_serialized_string(char *string) {$/;"	f
json_number	src/parson.c	/^double json_number (const JSON_Value *value) {$/;"	f
json_object	src/parson.c	/^JSON_Object * json_object (const JSON_Value *value) {$/;"	f
json_object_add	src/parson.c	/^static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f	file:
json_object_clear	src/parson.c	/^JSON_Status json_object_clear(JSON_Object *object) {$/;"	f
json_object_dotget_array	src/parson.c	/^JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_boolean	src/parson.c	/^int json_object_dotget_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_number	src/parson.c	/^double json_object_dotget_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_object	src/parson.c	/^JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_string	src/parson.c	/^const char * json_object_dotget_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_value	src/parson.c	/^JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotremove	src/parson.c	/^JSON_Status json_object_dotremove(JSON_Object *object, const char *name) {$/;"	f
json_object_dotset_boolean	src/parson.c	/^JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_dotset_null	src/parson.c	/^JSON_Status json_object_dotset_null(JSON_Object *object, const char *name) {$/;"	f
json_object_dotset_number	src/parson.c	/^JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_dotset_string	src/parson.c	/^JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_dotset_value	src/parson.c	/^JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_free	src/parson.c	/^static void json_object_free(JSON_Object *object) {$/;"	f	file:
json_object_get_array	src/parson.c	/^JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_boolean	src/parson.c	/^int json_object_get_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_count	src/parson.c	/^size_t json_object_get_count(const JSON_Object *object) {$/;"	f
json_object_get_name	src/parson.c	/^const char * json_object_get_name(const JSON_Object *object, size_t index) {$/;"	f
json_object_get_number	src/parson.c	/^double json_object_get_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_object	src/parson.c	/^JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_string	src/parson.c	/^const char * json_object_get_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_value	src/parson.c	/^JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_init	src/parson.c	/^static JSON_Object * json_object_init(void) {$/;"	f	file:
json_object_nget_value	src/parson.c	/^static JSON_Value * json_object_nget_value(const JSON_Object *object, const char *name, size_t n) {$/;"	f	file:
json_object_remove	src/parson.c	/^JSON_Status json_object_remove(JSON_Object *object, const char *name) {$/;"	f
json_object_resize	src/parson.c	/^static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {$/;"	f	file:
json_object_set_boolean	src/parson.c	/^JSON_Status json_object_set_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_set_null	src/parson.c	/^JSON_Status json_object_set_null(JSON_Object *object, const char *name) {$/;"	f
json_object_set_number	src/parson.c	/^JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_set_string	src/parson.c	/^JSON_Status json_object_set_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_set_value	src/parson.c	/^JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_t	src/parson.c	/^struct json_object_t {$/;"	s	file:
json_parse_file	src/parson.c	/^JSON_Value * json_parse_file(const char *filename) {$/;"	f
json_parse_file_with_comments	src/parson.c	/^JSON_Value * json_parse_file_with_comments(const char *filename) {$/;"	f
json_parse_string	src/parson.c	/^JSON_Value * json_parse_string(const char *string) {$/;"	f
json_parse_string_with_comments	src/parson.c	/^JSON_Value * json_parse_string_with_comments(const char *string) {$/;"	f
json_result_t	inc/parson.h	/^enum json_result_t {$/;"	g
json_serialization_size	src/parson.c	/^size_t json_serialization_size(const JSON_Value *value) {$/;"	f
json_serialization_size_pretty	src/parson.c	/^size_t json_serialization_size_pretty(const JSON_Value *value) {$/;"	f
json_serialize_string	src/parson.c	/^static int json_serialize_string(const char *string, char *buf) {$/;"	f	file:
json_serialize_to_buffer	src/parson.c	/^JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_pretty	src/parson.c	/^JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_r	src/parson.c	/^static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)$/;"	f	file:
json_serialize_to_file	src/parson.c	/^JSON_Status json_serialize_to_file(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_file_pretty	src/parson.c	/^JSON_Status json_serialize_to_file_pretty(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_string	src/parson.c	/^char * json_serialize_to_string(const JSON_Value *value) {$/;"	f
json_serialize_to_string_pretty	src/parson.c	/^char * json_serialize_to_string_pretty(const JSON_Value *value) {$/;"	f
json_set_allocation_functions	src/parson.c	/^void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {$/;"	f
json_string	src/parson.c	/^const char * json_string (const JSON_Value *value) {$/;"	f
json_type	src/parson.c	/^JSON_Value_Type json_type(const JSON_Value *value) {$/;"	f
json_validate	src/parson.c	/^JSON_Status json_validate(const JSON_Value *schema, const JSON_Value *value) {$/;"	f
json_value_deep_copy	src/parson.c	/^JSON_Value * json_value_deep_copy(const JSON_Value *value) {$/;"	f
json_value_equals	src/parson.c	/^JSON_Status json_value_equals(const JSON_Value *a, const JSON_Value *b) {$/;"	f
json_value_free	src/parson.c	/^void json_value_free(JSON_Value *value) {$/;"	f
json_value_get_array	src/parson.c	/^JSON_Array * json_value_get_array(const JSON_Value *value) {$/;"	f
json_value_get_boolean	src/parson.c	/^int json_value_get_boolean(const JSON_Value *value) {$/;"	f
json_value_get_number	src/parson.c	/^double json_value_get_number(const JSON_Value *value) {$/;"	f
json_value_get_object	src/parson.c	/^JSON_Object * json_value_get_object(const JSON_Value *value) {$/;"	f
json_value_get_string	src/parson.c	/^const char * json_value_get_string(const JSON_Value *value) {$/;"	f
json_value_get_type	src/parson.c	/^JSON_Value_Type json_value_get_type(const JSON_Value *value) {$/;"	f
json_value_init_array	src/parson.c	/^JSON_Value * json_value_init_array(void) {$/;"	f
json_value_init_boolean	src/parson.c	/^JSON_Value * json_value_init_boolean(int boolean) {$/;"	f
json_value_init_null	src/parson.c	/^JSON_Value * json_value_init_null(void) {$/;"	f
json_value_init_number	src/parson.c	/^JSON_Value * json_value_init_number(double number) {$/;"	f
json_value_init_object	src/parson.c	/^JSON_Value * json_value_init_object(void) {$/;"	f
json_value_init_string	src/parson.c	/^JSON_Value * json_value_init_string(const char *string) {$/;"	f
json_value_init_string_no_copy	src/parson.c	/^static JSON_Value * json_value_init_string_no_copy(char *string) {$/;"	f	file:
json_value_t	src/parson.c	/^struct json_value_t {$/;"	s	file:
json_value_type	inc/parson.h	/^enum json_value_type {$/;"	g
json_value_value	src/parson.c	/^typedef union json_value_value {$/;"	u	file:
keepalive_time	src/lora_pkt_fwd.c	/^static int keepalive_time = DEFAULT_KEEPALIVE; \/* send a PULL_DATA request every X seconds, negative = disabled *\/$/;"	v	file:
lgwm	src/lora_pkt_fwd.c	/^static uint64_t lgwm = 0; \/* Lora gateway MAC address *\/$/;"	v	file:
loop	src/single_tx.c	/^static int loop = 0;$/;"	v	file:
main	src/lora_pkt_fwd.c	/^int main(void)$/;"	f
main	src/single_tx.c	/^int main(int argc, char *argv[])$/;"	f
malloc	src/parson.c	46;"	d	file:
meas_dw_ack_rcv	src/lora_pkt_fwd.c	/^static uint32_t meas_dw_ack_rcv = 0; \/* number of PULL requests acknowledged for downstream traffic *\/$/;"	v	file:
meas_dw_dgram_rcv	src/lora_pkt_fwd.c	/^static uint32_t meas_dw_dgram_rcv = 0; \/* count PULL response packets received for downstream traffic *\/$/;"	v	file:
meas_dw_network_byte	src/lora_pkt_fwd.c	/^static uint32_t meas_dw_network_byte = 0; \/* sum of UDP bytes sent for upstream traffic *\/$/;"	v	file:
meas_dw_payload_byte	src/lora_pkt_fwd.c	/^static uint32_t meas_dw_payload_byte = 0; \/* sum of radio payload bytes sent for upstream traffic *\/$/;"	v	file:
meas_dw_pull_sent	src/lora_pkt_fwd.c	/^static uint32_t meas_dw_pull_sent = 0; \/* number of PULL requests sent for downstream traffic *\/$/;"	v	file:
meas_gps_coord	src/lora_pkt_fwd.c	/^static struct coord_s meas_gps_coord; \/* GPS position of the gateway *\/$/;"	v	typeref:struct:coord_s	file:
meas_gps_err	src/lora_pkt_fwd.c	/^static struct coord_s meas_gps_err; \/* GPS position of the gateway *\/$/;"	v	typeref:struct:coord_s	file:
meas_nb_beacon_queued	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_beacon_queued = 0; \/* count beacon inserted in jit queue *\/$/;"	v	file:
meas_nb_beacon_rejected	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_beacon_rejected = 0; \/* count beacon rejected for queuing *\/$/;"	v	file:
meas_nb_beacon_sent	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_beacon_sent = 0; \/* count beacon actually sent to concentrator *\/$/;"	v	file:
meas_nb_rx_bad	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_rx_bad = 0; \/* count packets received with PAYLOAD CRC ERROR *\/$/;"	v	file:
meas_nb_rx_nocrc	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_rx_nocrc = 0; \/* count packets received with NO PAYLOAD CRC *\/$/;"	v	file:
meas_nb_rx_ok	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_rx_ok = 0; \/* count packets received with PAYLOAD CRC OK *\/$/;"	v	file:
meas_nb_rx_rcv	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_rx_rcv = 0; \/* count packets received *\/$/;"	v	file:
meas_nb_tx_fail	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_fail = 0; \/* count packets were TX failed for other reasons *\/$/;"	v	file:
meas_nb_tx_ok	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_ok = 0; \/* count packets emitted successfully *\/$/;"	v	file:
meas_nb_tx_rejected_collision_beacon	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_rejected_collision_beacon = 0; \/* count packets were TX request were rejected due to collision with a beacon already programmed *\/$/;"	v	file:
meas_nb_tx_rejected_collision_packet	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_rejected_collision_packet = 0; \/* count packets were TX request were rejected due to collision with another packet already programmed *\/$/;"	v	file:
meas_nb_tx_rejected_too_early	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_rejected_too_early = 0; \/* count packets were TX request were rejected because timestamp is too much in advance *\/$/;"	v	file:
meas_nb_tx_rejected_too_late	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_rejected_too_late = 0; \/* count packets were TX request were rejected because it is too late to program it *\/$/;"	v	file:
meas_nb_tx_requested	src/lora_pkt_fwd.c	/^static uint32_t meas_nb_tx_requested = 0; \/* count TX request from server (downlinks) *\/$/;"	v	file:
meas_up_ack_rcv	src/lora_pkt_fwd.c	/^static uint32_t meas_up_ack_rcv = 0; \/* number of datagrams acknowledged for upstream traffic *\/$/;"	v	file:
meas_up_dgram_sent	src/lora_pkt_fwd.c	/^static uint32_t meas_up_dgram_sent = 0; \/* number of datagrams sent for upstream traffic *\/$/;"	v	file:
meas_up_network_byte	src/lora_pkt_fwd.c	/^static uint32_t meas_up_network_byte = 0; \/* sum of UDP bytes sent for upstream traffic *\/$/;"	v	file:
meas_up_payload_byte	src/lora_pkt_fwd.c	/^static uint32_t meas_up_payload_byte = 0; \/* sum of radio payload bytes sent for upstream traffic *\/$/;"	v	file:
meas_up_pkt_fwd	src/lora_pkt_fwd.c	/^static uint32_t meas_up_pkt_fwd = 0; \/* number of radio packet forwarded to the server *\/$/;"	v	file:
mode	src/single_tx.c	/^static int mode = 0;$/;"	v	file:
mx_concent	src/lora_pkt_fwd.c	/^pthread_mutex_t mx_concent = PTHREAD_MUTEX_INITIALIZER; \/* control access to the concentrator *\/$/;"	v
mx_jit_queue	src/jitqueue.c	/^static pthread_mutex_t mx_jit_queue = PTHREAD_MUTEX_INITIALIZER; \/* control access to JIT queue *\/$/;"	v	file:
mx_meas_dw	src/lora_pkt_fwd.c	/^static pthread_mutex_t mx_meas_dw = PTHREAD_MUTEX_INITIALIZER; \/* control access to the downstream measurements *\/$/;"	v	file:
mx_meas_gps	src/lora_pkt_fwd.c	/^static pthread_mutex_t mx_meas_gps = PTHREAD_MUTEX_INITIALIZER; \/* control access to the GPS statistics *\/$/;"	v	file:
mx_meas_up	src/lora_pkt_fwd.c	/^static pthread_mutex_t mx_meas_up = PTHREAD_MUTEX_INITIALIZER; \/* control access to the upstream measurements *\/$/;"	v	file:
mx_stat_rep	src/lora_pkt_fwd.c	/^static pthread_mutex_t mx_stat_rep = PTHREAD_MUTEX_INITIALIZER; \/* control access to the status report *\/$/;"	v	file:
mx_timeref	src/lora_pkt_fwd.c	/^static pthread_mutex_t mx_timeref = PTHREAD_MUTEX_INITIALIZER; \/* control access to GPS time reference *\/$/;"	v	file:
mx_timersync	src/timersync.c	/^static pthread_mutex_t mx_timersync = PTHREAD_MUTEX_INITIALIZER; \/* control access to timer sync offsets *\/$/;"	v	file:
mx_xcorr	src/lora_pkt_fwd.c	/^static pthread_mutex_t mx_xcorr = PTHREAD_MUTEX_INITIALIZER; \/* control access to the XTAL correction *\/$/;"	v	file:
names	src/parson.c	/^    char       **names;$/;"	m	struct:json_object_t	file:
net_mac_h	src/lora_pkt_fwd.c	/^static uint32_t net_mac_h; \/* Most Significant Nibble, network order *\/$/;"	v	file:
net_mac_l	src/lora_pkt_fwd.c	/^static uint32_t net_mac_l; \/* Least Significant Nibble, network order *\/$/;"	v	file:
nocrc	inc/radio.h	/^    uint8_t nocrc;$/;"	m	struct:__anon2
nodes	inc/jitqueue.h	/^    struct jit_node_s nodes[JIT_QUEUE_MAX]; \/* Nodes\/packets array in the queue *\/$/;"	m	struct:jit_queue_s	typeref:struct:jit_queue_s::jit_node_s
nss	inc/radio.h	/^    uint8_t nss;$/;"	m	struct:__anon2
null	src/parson.c	/^    int          null;$/;"	m	union:json_value_value	file:
num_beacon	inc/jitqueue.h	/^    uint8_t num_beacon;             \/* Number of beacons in the queue *\/$/;"	m	struct:jit_queue_s
num_bytes_in_utf8_sequence	src/parson.c	/^static int num_bytes_in_utf8_sequence(unsigned char c) {$/;"	f	file:
num_pkt	inc/jitqueue.h	/^    uint8_t num_pkt;                \/* Total number of packets in the queue (downlinks, beacons...) *\/$/;"	m	struct:jit_queue_s
number	src/parson.c	/^    double       number;$/;"	m	union:json_value_value	file:
object	src/parson.c	/^    JSON_Object *object;$/;"	m	union:json_value_value	file:
offset_unix_concent	src/timersync.c	/^static struct timeval offset_unix_concent = {0,0}; \/* timer offset between unix host and concentrator *\/$/;"	v	typeref:struct:timeval	file:
opmode	src/radio.c	/^static void opmode (uint8_t spidev, uint8_t mode) {$/;"	f	file:
opmodeLora	src/radio.c	/^static void opmodeLora(uint8_t spidev) {$/;"	f	file:
parse_SX1301_configuration	src/lora_pkt_fwd.c	/^static int parse_SX1301_configuration(const char * conf_file) {$/;"	f	file:
parse_array_value	src/parson.c	/^static JSON_Value * parse_array_value(const char **string, size_t nesting) {$/;"	f	file:
parse_boolean_value	src/parson.c	/^static JSON_Value * parse_boolean_value(const char **string) {$/;"	f	file:
parse_gateway_configuration	src/lora_pkt_fwd.c	/^static int parse_gateway_configuration(const char * conf_file) {$/;"	f	file:
parse_null_value	src/parson.c	/^static JSON_Value * parse_null_value(const char **string) {$/;"	f	file:
parse_number_value	src/parson.c	/^static JSON_Value * parse_number_value(const char **string) {$/;"	f	file:
parse_object_value	src/parson.c	/^static JSON_Value * parse_object_value(const char **string, size_t nesting) {$/;"	f	file:
parse_string_value	src/parson.c	/^static JSON_Value * parse_string_value(const char **string) {$/;"	f	file:
parse_utf_16	src/parson.c	/^static int parse_utf_16(const char **unprocessed, char **processed) {$/;"	f	file:
parse_value	src/parson.c	/^static JSON_Value * parse_value(const char **string, size_t nesting) {$/;"	f	file:
parson_free	src/parson.c	/^static JSON_Free_Function parson_free = free;$/;"	v	file:
parson_malloc	src/parson.c	/^static JSON_Malloc_Function parson_malloc = malloc;$/;"	v	file:
parson_parson_h	inc/parson.h	25;"	d
parson_strdup	src/parson.c	/^static char * parson_strdup(const char *string) {$/;"	f	file:
parson_strndup	src/parson.c	/^static char * parson_strndup(const char *string, size_t n) {$/;"	f	file:
pkt	inc/jitqueue.h	/^    struct lgw_pkt_tx_s pkt;        \/* TX packet *\/$/;"	m	struct:jit_node_s	typeref:struct:jit_node_s::lgw_pkt_tx_s
pkt_type	inc/jitqueue.h	/^    enum jit_pkt_type_e pkt_type;   \/* Packet type: Downlink, Beacon... *\/$/;"	m	struct:jit_node_s	typeref:enum:jit_node_s::jit_pkt_type_e
post_delay	inc/jitqueue.h	/^    uint32_t post_delay;            \/* Amount of time after packet timestamp to be reserved (time on air) *\/$/;"	m	struct:jit_node_s
pre_delay	inc/jitqueue.h	/^    uint32_t pre_delay;             \/* Amount of time before packet timestamp to be reserved *\/$/;"	m	struct:jit_node_s
print_help	src/single_tx.c	/^void print_help(void) {$/;"	f
print_tx_status	src/lora_pkt_fwd.c	/^void print_tx_status(uint8_t tx_status) {$/;"	f
prlen	inc/radio.h	/^    uint8_t prlen;$/;"	m	struct:__anon2
prlen	src/single_tx.c	/^static char prlen[8] = "8";$/;"	v	file:
process_string	src/parson.c	/^static char* process_string(const char *input, size_t len) {$/;"	f	file:
pull_timeout	src/lora_pkt_fwd.c	/^static struct timeval pull_timeout = {0, (PULL_TIMEOUT_MS * 1000)}; \/* non critical for throughput *\/$/;"	v	typeref:struct:timeval	file:
push_timeout_half	src/lora_pkt_fwd.c	/^static struct timeval push_timeout_half = {0, (PUSH_TIMEOUT_MS * 500)}; \/* cut in half, critical for throughput *\/$/;"	v	typeref:struct:timeval	file:
pw	src/single_tx.c	/^static char pw[8] = "16";$/;"	v	file:
qsort_r	src/jitqueue.c	/^static void qsort_r(void  *base, size_t nel, size_t width, __compar_d_fn_t comp, void *arg) {$/;"	f	file:
quit_sig	src/lora_pkt_fwd.c	/^volatile bool quit_sig = false; \/* 1 -> application terminates without shutting down the hardware *\/$/;"	v
quit_sig	src/single_tx.c	/^volatile bool quit_sig = false; \/* 1 -> application terminates without shutting down the hardware *\/$/;"	v
radiodev	inc/radio.h	/^}radiodev; $/;"	t	typeref:struct:__anon2
readReg	src/radio.c	/^static uint8_t readReg(uint8_t spidev, uint8_t addr)$/;"	f	file:
read_file	src/parson.c	/^static char * read_file(const char * filename) {$/;"	f	file:
received	src/radio.c	/^bool received(uint8_t spidev, struct lgw_pkt_rx_s *pkt_rx) {$/;"	f
reference_coord	src/lora_pkt_fwd.c	/^static struct coord_s reference_coord;$/;"	v	typeref:struct:coord_s	file:
remove_comments	src/parson.c	/^static void remove_comments(char *string, const char *start_token, const char *end_token) {$/;"	f	file:
report_ready	src/lora_pkt_fwd.c	/^static bool report_ready = false; \/* true when there is a new report to send to the server *\/$/;"	v	file:
rf_power	inc/radio.h	/^    int8_t rf_power;$/;"	m	struct:__anon2
rst	inc/radio.h	/^    uint8_t rst;$/;"	m	struct:__anon2
rxlora	src/radio.c	/^void rxlora(int spidev, uint8_t rxmode)$/;"	f
rxlorairqmask	src/radio.c	/^static const uint8_t rxlorairqmask[] = {$/;"	v	file:
send_tx_ack	src/lora_pkt_fwd.c	/^static int send_tx_ack(uint8_t token_h, uint8_t token_l, enum jit_error_e error) {$/;"	f	file:
serv_addr	src/lora_pkt_fwd.c	/^static char serv_addr[64] = STR(DEFAULT_SERVER); \/* address of the server (host name or IPv4\/IPv6) *\/$/;"	v	file:
serv_port_down	src/lora_pkt_fwd.c	/^static char serv_port_down[8] = STR(DEFAULT_PORT_DW); \/* server port for downstream traffic *\/$/;"	v	file:
serv_port_up	src/lora_pkt_fwd.c	/^static char serv_port_up[8] = STR(DEFAULT_PORT_UP); \/* server port for upstream traffic *\/$/;"	v	file:
server_type	src/lora_pkt_fwd.c	/^static char server_type[16] = "server_type";$/;"	v	file:
setcr	src/radio.c	/^void setcr(uint8_t spidev, int denominator)$/;"	f
setfreq	src/radio.c	/^void setfreq(uint8_t spidev, long frequency)$/;"	f
setpower	src/radio.c	/^void setpower(uint8_t spidev, uint8_t pw) {$/;"	f
setprlen	src/radio.c	/^void setprlen(uint8_t spidev, long length)$/;"	f
setsbw	src/radio.c	/^void setsbw(uint8_t spidev, long sbw)$/;"	f
setsf	src/radio.c	/^void setsf(uint8_t spidev, int sf)$/;"	f
setsyncword	src/radio.c	/^void setsyncword(uint8_t spidev, int sw)$/;"	f
setup_channel	src/radio.c	/^void setup_channel(radiodev *dev)$/;"	f
sf	inc/radio.h	/^    uint8_t sf;$/;"	m	struct:__anon2
sf	src/single_tx.c	/^static char sf[8] = "7";$/;"	v	file:
sf_t	inc/radio.h	/^enum sf_t { SF7=7, SF8, SF9, SF10, SF11, SF12 };$/;"	g
sig_handler	src/lora_pkt_fwd.c	/^static void sig_handler(int sigio) {$/;"	f	file:
single_tx	src/radio.c	/^void single_tx(radiodev *dev, uint8_t *payload, int size) {$/;"	f
skip_quotes	src/parson.c	/^static void skip_quotes(const char **string) {$/;"	f	file:
sock_down	src/lora_pkt_fwd.c	/^static int sock_down; \/* socket for downstream traffic *\/$/;"	v	file:
sock_up	src/lora_pkt_fwd.c	/^static int sock_up; \/* socket for upstream traffic *\/$/;"	v	file:
spi_open	src/radio.c	/^int spi_open(char *spi_path) {$/;"	f
spi_r	src/radio.c	/^static int spi_r(uint8_t spidev, uint8_t address, uint8_t *data) {$/;"	f	file:
spi_w	src/radio.c	/^static int spi_w(uint8_t spidev, uint8_t address, uint8_t data) {$/;"	f	file:
spiport	inc/radio.h	/^    uint8_t  spiport;$/;"	m	struct:__anon2
stat_interval	src/lora_pkt_fwd.c	/^static unsigned stat_interval = DEFAULT_STAT; \/* time interval (in sec) at which statistics are collected and displayed *\/$/;"	v	file:
status_report	src/lora_pkt_fwd.c	/^static char status_report[STATUS_SIZE]; \/* status report as a JSON object *\/$/;"	v	file:
string	src/parson.c	/^    char        *string;$/;"	m	union:json_value_value	file:
sx1276	src/lora_pkt_fwd.c	/^static bool sx1276 = false;$/;"	v	file:
sxradio	src/lora_pkt_fwd.c	/^radiodev *sxradio;$/;"	v
syncword	inc/radio.h	/^    uint8_t syncword;$/;"	m	struct:__anon2
thread_down	src/lora_pkt_fwd.c	/^void thread_down(void) {$/;"	f
thread_gps	src/lora_pkt_fwd.c	/^void thread_gps(void) {$/;"	f
thread_jit	src/lora_pkt_fwd.c	/^void thread_jit(void) {$/;"	f
thread_timersync	src/timersync.c	/^void thread_timersync(void) {$/;"	f
thread_up	src/lora_pkt_fwd.c	/^void thread_up(void) {$/;"	f
thread_valid	src/lora_pkt_fwd.c	/^void thread_valid(void) {$/;"	f
time_reference_gps	src/lora_pkt_fwd.c	/^static struct tref time_reference_gps; \/* time reference used for GPS <-> timestamp conversion *\/$/;"	v	typeref:struct:tref	file:
timersub	src/timersync.c	36;"	d	file:
tx_freq_max	src/lora_pkt_fwd.c	/^static uint32_t tx_freq_max[LGW_RF_CHAIN_NB]; \/* highest frequency supported by TX chain *\/$/;"	v	file:
tx_freq_min	src/lora_pkt_fwd.c	/^static uint32_t tx_freq_min[LGW_RF_CHAIN_NB]; \/* lowest frequency supported by TX chain *\/$/;"	v	file:
txlora	src/radio.c	/^void txlora(radiodev *dev, struct lgw_pkt_tx_s *pkt) {$/;"	f
txlut	src/lora_pkt_fwd.c	/^static struct lgw_tx_gain_lut_s txlut; \/* TX gain table *\/$/;"	v	typeref:struct:lgw_tx_gain_lut_s	file:
type	src/parson.c	/^    JSON_Value_Type     type;$/;"	m	struct:json_value_t	file:
uci_config_file	src/lora_pkt_fwd.c	/^static char uci_config_file[32] = "\/etc\/config\/gateway";$/;"	v	file:
value	src/parson.c	/^    JSON_Value_Value    value;$/;"	m	struct:json_value_t	file:
values	src/parson.c	/^    JSON_Value **values;$/;"	m	struct:json_object_t	file:
verify_utf8_sequence	src/parson.c	/^static int verify_utf8_sequence(const unsigned char *string, int *len) {$/;"	f	file:
wd	src/single_tx.c	/^static char wd[8] = "52";$/;"	v	file:
writeReg	src/radio.c	/^static void writeReg(uint8_t spidev, uint8_t addr, uint8_t value)$/;"	f	file:
xtal_correct	src/lora_pkt_fwd.c	/^static double xtal_correct = 1.0;$/;"	v	file:
xtal_correct_ok	src/lora_pkt_fwd.c	/^static bool xtal_correct_ok = false; \/* set true when XTAL correction is stable enough *\/$/;"	v	file:
